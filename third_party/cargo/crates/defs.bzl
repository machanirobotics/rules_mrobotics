###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @//third_party/cargo:rules_mrobotics_crates
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "protoc-gen-prost": "@rules_mrobotics_crates__protoc-gen-prost-0.2.2//:protoc_gen_prost",
            "protoc-gen-prost-crate": "@rules_mrobotics_crates__protoc-gen-prost-crate-0.3.1//:protoc_gen_prost_crate",
            "protoc-gen-tonic": "@rules_mrobotics_crates__protoc-gen-tonic-0.2.2//:protoc_gen_tonic",
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": ["aarch64-pc-windows-msvc"],
    "aarch64-uwp-windows-msvc": [],
    "cfg(all(any(target_os = \"android\", target_os = \"linux\"), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"), all(target_endian = \"little\", any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"powerpc64\", target_arch = \"riscv64\", target_arch = \"mips\", target_arch = \"mips64\"))))))))": ["aarch64-linux-android", "armv7-linux-androideabi", "i686-linux-android", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-linux-android"],
    "cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"), all(target_endian = \"little\", any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"powerpc64\", target_arch = \"riscv64\", target_arch = \"mips\", target_arch = \"mips64\")))))": ["aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-unknown-linux-gnueabi", "i686-unknown-linux-gnu", "x86_64-unknown-linux-gnu"],
    "cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"), all(target_endian = \"little\", any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"powerpc64\", target_arch = \"riscv64\", target_arch = \"mips\", target_arch = \"mips64\"))))))))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-fuchsia", "aarch64-linux-android", "armv7-linux-androideabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "riscv64gc-unknown-none-elf", "s390x-unknown-linux-gnu", "thumbv7em-none-eabi", "wasm32-unknown-unknown", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-fuchsia", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-none"],
    "cfg(all(target_arch = \"aarch64\", target_env = \"gnu\", target_abi = \"llvm\", not(windows_raw_dylib)))": [],
    "cfg(all(target_arch = \"aarch64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["aarch64-pc-windows-msvc"],
    "cfg(all(target_arch = \"wasm32\", not(target_os = \"wasi\")))": ["wasm32-unknown-unknown"],
    "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(windows_raw_dylib)))": ["i686-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": ["i686-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["x86_64-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", target_abi = \"llvm\", not(windows_raw_dylib)))": [],
    "cfg(all(target_arch = \"x86_64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["x86_64-pc-windows-msvc"],
    "cfg(any(unix, target_os = \"wasi\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-fuchsia", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-fuchsia", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(not(windows))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-fuchsia", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "riscv64gc-unknown-none-elf", "s390x-unknown-linux-gnu", "thumbv7em-none-eabi", "wasm32-unknown-unknown", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-fuchsia", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu", "x86_64-unknown-none"],
    "cfg(not(windows_raw_dylib))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-fuchsia", "aarch64-linux-android", "aarch64-pc-windows-msvc", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "riscv64gc-unknown-none-elf", "s390x-unknown-linux-gnu", "thumbv7em-none-eabi", "wasm32-unknown-unknown", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-fuchsia", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu", "x86_64-unknown-none"],
    "cfg(target_os = \"dragonfly\")": [],
    "cfg(target_os = \"hermit\")": [],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"wasi\")": ["wasm32-wasi"],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-fuchsia", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-fuchsia", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["aarch64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "i686-pc-windows-msvc": ["i686-pc-windows-msvc"],
    "i686-uwp-windows-gnu": [],
    "i686-uwp-windows-msvc": [],
    "x86_64-pc-windows-gnu": [],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["x86_64-pc-windows-msvc"],
    "x86_64-uwp-windows-gnu": [],
    "x86_64-uwp-windows-msvc": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "rules_mrobotics_crates__anyhow-1.0.71",
        sha256 = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/anyhow/1.0.71/download"],
        strip_prefix = "anyhow-1.0.71",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.anyhow-1.0.71.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__bytes-1.4.0",
        sha256 = "89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bytes/1.4.0/download"],
        strip_prefix = "bytes-1.4.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.bytes-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__cc-1.0.79",
        sha256 = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.79/download"],
        strip_prefix = "cc-1.0.79",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.cc-1.0.79.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__either-1.8.1",
        sha256 = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/either/1.8.1/download"],
        strip_prefix = "either-1.8.1",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.either-1.8.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__errno-0.3.1",
        sha256 = "4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/errno/0.3.1/download"],
        strip_prefix = "errno-0.3.1",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.errno-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__errno-dragonfly-0.1.2",
        sha256 = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/errno-dragonfly/0.1.2/download"],
        strip_prefix = "errno-dragonfly-0.1.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.errno-dragonfly-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__fastrand-1.9.0",
        sha256 = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fastrand/1.9.0/download"],
        strip_prefix = "fastrand-1.9.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.fastrand-1.9.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__fixedbitset-0.4.2",
        sha256 = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fixedbitset/0.4.2/download"],
        strip_prefix = "fixedbitset-0.4.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.fixedbitset-0.4.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__hashbrown-0.12.3",
        sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.12.3/download"],
        strip_prefix = "hashbrown-0.12.3",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.hashbrown-0.12.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__heck-0.4.1",
        sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/heck/0.4.1/download"],
        strip_prefix = "heck-0.4.1",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.heck-0.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__hermit-abi-0.3.1",
        sha256 = "fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hermit-abi/0.3.1/download"],
        strip_prefix = "hermit-abi-0.3.1",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.hermit-abi-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__indexmap-1.9.3",
        sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indexmap/1.9.3/download"],
        strip_prefix = "indexmap-1.9.3",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.indexmap-1.9.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__instant-0.1.12",
        sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/instant/0.1.12/download"],
        strip_prefix = "instant-0.1.12",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.instant-0.1.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__io-lifetimes-1.0.11",
        sha256 = "eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/io-lifetimes/1.0.11/download"],
        strip_prefix = "io-lifetimes-1.0.11",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.io-lifetimes-1.0.11.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__itertools-0.10.5",
        sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itertools/0.10.5/download"],
        strip_prefix = "itertools-0.10.5",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.itertools-0.10.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__libc-0.2.144",
        sha256 = "2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.144/download"],
        strip_prefix = "libc-0.2.144",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.libc-0.2.144.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__linux-raw-sys-0.3.8",
        sha256 = "ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/linux-raw-sys/0.3.8/download"],
        strip_prefix = "linux-raw-sys-0.3.8",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.linux-raw-sys-0.3.8.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__log-0.4.18",
        sha256 = "518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.18/download"],
        strip_prefix = "log-0.4.18",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.log-0.4.18.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__multimap-0.8.3",
        sha256 = "e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/multimap/0.8.3/download"],
        strip_prefix = "multimap-0.8.3",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.multimap-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__once_cell-1.17.2",
        sha256 = "9670a07f94779e00908f3e686eab508878ebb390ba6e604d3a284c00e8d0487b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.17.2/download"],
        strip_prefix = "once_cell-1.17.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.once_cell-1.17.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__petgraph-0.6.3",
        sha256 = "4dd7d28ee937e54fe3080c91faa1c3a46c06de6252988a7f4592ba2310ef22a4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/petgraph/0.6.3/download"],
        strip_prefix = "petgraph-0.6.3",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.petgraph-0.6.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__prettyplease-0.1.25",
        sha256 = "6c8646e95016a7a6c4adea95bafa8a16baab64b583356217f2c85db4a39d9a86",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prettyplease/0.1.25/download"],
        strip_prefix = "prettyplease-0.1.25",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.prettyplease-0.1.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__proc-macro2-1.0.59",
        sha256 = "6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.59/download"],
        strip_prefix = "proc-macro2-1.0.59",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.proc-macro2-1.0.59.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__prost-0.11.9",
        sha256 = "0b82eaa1d779e9a4bc1c3217db8ffbeabaae1dca241bf70183242128d48681cd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost/0.11.9/download"],
        strip_prefix = "prost-0.11.9",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.prost-0.11.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__prost-build-0.11.9",
        sha256 = "119533552c9a7ffacc21e099c24a0ac8bb19c2a2a3f363de84cd9b844feab270",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-build/0.11.9/download"],
        strip_prefix = "prost-build-0.11.9",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.prost-build-0.11.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__prost-derive-0.11.9",
        sha256 = "e5d2d8d10f3c6ded6da8b05b5fb3b8a5082514344d56c9f871412d29b4e075b4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-derive/0.11.9/download"],
        strip_prefix = "prost-derive-0.11.9",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.prost-derive-0.11.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__prost-types-0.11.9",
        sha256 = "213622a1460818959ac1181aaeb2dc9c7f63df720db7d788b3e24eacd1983e13",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-types/0.11.9/download"],
        strip_prefix = "prost-types-0.11.9",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.prost-types-0.11.9.bazel"),
    )

    maybe(
        new_git_repository,
        name = "rules_mrobotics_crates__protoc-gen-prost-0.2.1",
        commit = "038cd342677dfa869f8c3a2a2787a139fc561df8",
        init_submodules = True,
        remote = "https://github.com/neoeinstein/protoc-gen-prost",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.protoc-gen-prost-0.2.1.bazel"),
        strip_prefix = "protoc-gen-prost",
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__protoc-gen-prost-0.2.2",
        sha256 = "a81e3a9bb429fec47008b209896f0b9ab99fbcbc1c3733b385d43fbfd64dd2ca",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/protoc-gen-prost/0.2.2/download"],
        strip_prefix = "protoc-gen-prost-0.2.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.protoc-gen-prost-0.2.2.bazel"),
    )

    maybe(
        new_git_repository,
        name = "rules_mrobotics_crates__protoc-gen-prost-crate-0.3.1",
        commit = "038cd342677dfa869f8c3a2a2787a139fc561df8",
        init_submodules = True,
        remote = "https://github.com/neoeinstein/protoc-gen-prost",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.protoc-gen-prost-crate-0.3.1.bazel"),
        strip_prefix = "protoc-gen-prost-crate",
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__protoc-gen-tonic-0.2.2",
        sha256 = "725a07a704f9cf7a956b302c21d81b5516ed5ee6cfbbf827edb69beeaae6cc30",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/protoc-gen-tonic/0.2.2/download"],
        strip_prefix = "protoc-gen-tonic-0.2.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.protoc-gen-tonic-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__quote-1.0.28",
        sha256 = "1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.28/download"],
        strip_prefix = "quote-1.0.28",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.quote-1.0.28.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__redox_syscall-0.3.5",
        sha256 = "567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.3.5/download"],
        strip_prefix = "redox_syscall-0.3.5",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.redox_syscall-0.3.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__regex-1.8.3",
        sha256 = "81ca098a9821bd52d6b24fd8b10bd081f47d39c22778cafaa75a2857a62c6390",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex/1.8.3/download"],
        strip_prefix = "regex-1.8.3",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.regex-1.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__regex-syntax-0.7.2",
        sha256 = "436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex-syntax/0.7.2/download"],
        strip_prefix = "regex-syntax-0.7.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.regex-syntax-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__rustix-0.37.19",
        sha256 = "acf8729d8542766f1b2cf77eb034d52f40d375bb8b615d0b147089946e16613d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustix/0.37.19/download"],
        strip_prefix = "rustix-0.37.19",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.rustix-0.37.19.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__syn-1.0.109",
        sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.109/download"],
        strip_prefix = "syn-1.0.109",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.syn-1.0.109.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__tempfile-3.5.0",
        sha256 = "b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tempfile/3.5.0/download"],
        strip_prefix = "tempfile-3.5.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.tempfile-3.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__tonic-build-0.8.4",
        sha256 = "5bf5e9b9c0f7e0a7c027dcfaba7b2c60816c7049171f679d99ee2ff65d0de8c4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tonic-build/0.8.4/download"],
        strip_prefix = "tonic-build-0.8.4",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.tonic-build-0.8.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__unicode-ident-1.0.9",
        sha256 = "b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.9/download"],
        strip_prefix = "unicode-ident-1.0.9",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.unicode-ident-1.0.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__which-4.4.0",
        sha256 = "2441c784c52b289a054b7201fc93253e288f094e2f4be9058343127c4226a269",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/which/4.4.0/download"],
        strip_prefix = "which-4.4.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.which-4.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows-sys-0.45.0",
        sha256 = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.45.0/download"],
        strip_prefix = "windows-sys-0.45.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows-sys-0.45.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows-sys-0.48.0",
        sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.48.0/download"],
        strip_prefix = "windows-sys-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows-sys-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows-targets-0.42.2",
        sha256 = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-targets/0.42.2/download"],
        strip_prefix = "windows-targets-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows-targets-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows-targets-0.48.0",
        sha256 = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-targets/0.48.0/download"],
        strip_prefix = "windows-targets-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows-targets-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_aarch64_gnullvm-0.42.2",
        sha256 = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.42.2/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_aarch64_gnullvm-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_aarch64_gnullvm-0.48.0",
        sha256 = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.48.0/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_aarch64_gnullvm-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_aarch64_msvc-0.42.2",
        sha256 = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.42.2/download"],
        strip_prefix = "windows_aarch64_msvc-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_aarch64_msvc-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_aarch64_msvc-0.48.0",
        sha256 = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.48.0/download"],
        strip_prefix = "windows_aarch64_msvc-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_aarch64_msvc-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_i686_gnu-0.42.2",
        sha256 = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.42.2/download"],
        strip_prefix = "windows_i686_gnu-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_i686_gnu-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_i686_gnu-0.48.0",
        sha256 = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.48.0/download"],
        strip_prefix = "windows_i686_gnu-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_i686_gnu-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_i686_msvc-0.42.2",
        sha256 = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.42.2/download"],
        strip_prefix = "windows_i686_msvc-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_i686_msvc-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_i686_msvc-0.48.0",
        sha256 = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.48.0/download"],
        strip_prefix = "windows_i686_msvc-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_i686_msvc-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_gnu-0.42.2",
        sha256 = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.42.2/download"],
        strip_prefix = "windows_x86_64_gnu-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_gnu-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_gnu-0.48.0",
        sha256 = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.48.0/download"],
        strip_prefix = "windows_x86_64_gnu-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_gnu-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_gnullvm-0.42.2",
        sha256 = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.42.2/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_gnullvm-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_gnullvm-0.48.0",
        sha256 = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.48.0/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_gnullvm-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_msvc-0.42.2",
        sha256 = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.42.2/download"],
        strip_prefix = "windows_x86_64_msvc-0.42.2",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_msvc-0.42.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_mrobotics_crates__windows_x86_64_msvc-0.48.0",
        sha256 = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.48.0/download"],
        strip_prefix = "windows_x86_64_msvc-0.48.0",
        build_file = Label("@rules_mrobotics//third_party/cargo/crates:BUILD.windows_x86_64_msvc-0.48.0.bazel"),
    )
