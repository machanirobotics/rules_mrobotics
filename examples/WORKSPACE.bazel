workspace(name = "rules_mrobotics_examples")

######################################################
## loading rules_mrobotics

local_repository(
    name = "rules_mrobotics",
    path = "..",
)

load("@rules_mrobotics//third_party:repositories.bzl", "load_repositories", go_load_repositories = "load_repositories")

load_repositories()

load("@rules_mrobotics//third_party:toolchains.bzl", "load_toolchains")

load_toolchains()

load("@rules_mrobotics//third_party:workspace0.bzl", "init_workspace0")

init_workspace0()

load("@rules_mrobotics//third_party:workspace1.bzl", "init_workspace1")

init_workspace1()

######################################################
## everything else required by the examples
## rust
load("@rules_rust//crate_universe:defs.bzl", "crates_repository", "render_config")
load("//third_party/cargo:deps.bzl", "cargo_info")

crates_repository(
    name = "rules_mrobotics_examples_crate_index",
    cargo_lockfile = "//third_party/cargo:Cargo.lock",
    generate_binaries = True,
    lockfile = "//third_party/cargo:Cargo.Bazel.lock",
    packages = cargo_info.packages,
    render_config = render_config(
        default_package_name = "",
    ),
)

load("@rules_mrobotics_examples_crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

######################################################
## python
load("@rules_python//python:pip.bzl", "pip_parse")
load("@python//:defs.bzl", "interpreter")

pip_parse(
    name = "rules_mrobotics_pip",
    download_only = True,
    python_interpreter_target = interpreter,
    requirements_lock = "//third_party/pip:requirements.lock",
)

load("@rules_mrobotics_pip//:requirements.bzl", install_py_deps = "install_deps")

install_py_deps()

register_toolchains("//third_party:python_proto_toolchain", "//third_party:rust_proto_toolchain")

######################################################
## go

load("//third_party:go/deps.bzl", "go_repositories")

go_load_repositories()

# gazelle:repository_macro third_party/go/deps.bzl%go_repositories
go_repositories()
